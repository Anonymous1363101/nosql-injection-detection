db.users.find({ username: {"$not": ""}, password: {$regex: /^abc/} })::::1
db.collection.remove( {"title":"title-here"}, 1 )$collection->remove(array("title"=>"MongoDB"),array("justOne" => true));::::0
db.scores.findOneAndReplace({ "score" : { $lt : 22250 } },{ "team" : "Therapeutic Hamsters", "score" : 22250 },{ sort : { "score" : 1 }, project: { "_id" : 0, "team" : 1 } })::::0
db.collection.find({"likes" : {$gt:50}})::::0
db.ratings.aggregate([ { $project: { delta: { $abs: { $subtract: [ "$start", "$end" ] } } } } )::::0
db.collection.aggregate( [ { $project: { myArray: [ "$x", "$y" ] } } ] )::::0
db.Document.find({ "type": { "$ne: 0 "" } })::::1
db.collection.find({"id" : {$ne: 1}})::::0
db.scores.findOneAndDelete({ "name" : "A. MacGyver" },{ sort : { "points" : 1 }, maxTimeMS : 5 })::::0
db.collection.findAndModify({query: {$or:[{name: {first: "Yukihiro",last: "Matsumoto"}},{awards: {$elemMatch: {award: "Turing Award",year: { $gt: 1980 }}}},{ score: {$gt: 100}}]},sort: { rating: 1 },update: { $inc: { score: 1 } }})::::0
db.students.aggregate([ { $project: { quizMin: { $min: "$quizzes"}, labMin: { $min: "$labs" }, examMin: { $min: [ "$final", "$midterm" ] } } } )::::0
db.inventory.aggregate([{$project:{item: 1,qty: 1,cmpTo250: {$cmp: [ "$qty", 250 ] },_id: 0}}])::::0
db.collection.update( {"title":"old-title"}, {$set:{"title":"new-title"}} )$collection->update(array("title"=>"MongoDB Tutorial"),array('$set'=>array("title"=>"MongoDB")),);::::0
db.collection.find( { a: 5, b: 5 } ).count()::::0
db.posts.mapReduce( function() { emit(this.user_id,this.phoneno); }, function(key, values) {return  phoneno}, { query:{status:"active"}, out:"user_phone" })//1); }, function(key, values) {return  Array.sum(values)}, { query:{status:"active"}, out:"post_total" })::::1
db.products.update( { _id: 100 }, { $set: { quantity: 500, details: { model: "14Q3", make: "xyz" }, tags: [ "coats", "outerwear", "clothing" ] } } ::::0
db.collection.find({"color" : {$ne: "Blue"}})::::0
db.collection.find({ $or: [{"quantity": {"$lte": 20}}, {"price" : {"$lt": 100}}] })::::0
db.car.findAndModify({ uery: { name: "HondaCity", color: "Silver", cno:"H415" ,speed: 25 }, ort: { cno: 1 }, emove: true )::::0
db.users.find({"username": "admin"});db.user.insert(["username"=>"user","password"=>"12345678"])//, "password": {"$ne": ""}})::::1
db.collection.find( { a: { $bitsAllSet: [ 1, 5 ] } } )::::0
db.users.save({msg: '1';sleep(10000);var%20foo='bar'})::::1
db.collection.find({ $or: [{"author": "William Shakespeare"}, {"year" : 1600}] })::::0
$studentCollection->findAndModify(array("_id" => $studentId), ('$set' => array('Active' => false, "Reason"=> "Duplicate entry" "DeleteDate" => new MongoDate())), ("Payments" => 1), array("new" => false ));::::0
db.logout()::::0
db.probability.aggregate( [ { $group: { _id: "$experimentId", "probabilityArr": { $push: "$probability" } } }, { $project: { "description": 1, "results": { $reduce: { input: "$probabilityArr", initialValue: 1, in: { $multiply: [ "$$value", "$$this" ] } } } } } ] ::::0
db.user.save({"_id" : 1234, "name" : {"first": "foo", "last" : "bar"}})::::0
db.inventory.find( { $or : [ { $and : [ { "price" : {"$gt": 100} }, { "color" : "red" } ] }, { $and : [ { "size" : "M" }, { "ordered" : {"$lt": 100} } ] } ]} )::::0
db.inventory.find( { $or : [ { $and : [ { "price" : {"$lte": 100} }, { "color" : "red" } ] }, { $and : [ { "size" : "M" }, { "ordered" : {"$gte": 100} } ] } ] ) ::::0
db.users.find({"username": "admin"});db.getCollectionNames()//", "password": "abcd"})::::1
db.posts.mapReduce( function() { emit(this.user_id,this.phoneno); }, function(key, values) {return  phoneno}, { sort: {this.user_id: 1}, out:"user_phone" })//1); }, function(key, values) {return  Array.sum(values)}, { query:{status:"active"}, out:"post_total" })::::1
db.collection.find({ $or: [{"name": {"$ne": "john"}}, {"age" : {"$lt": 50}}] })::::0
db.books.insert({ title: ""As you like it"", Author: ""William Shakespeare""})"::::0
db.scores.findOneAndUpdate({ "name" : "A.B. Abracus" },{ $set: { "name" : "A.B. Abracus", "assignment" : 5}, $inc : { "points" : 5 } },{ sort: { "points" : 1 }, upsert:true, returnNewDocument : true })::::0
db.accounts.aggregate([{ $match: { status: "A" } },{$redact: {$cond: {if: { $eq: [ "$level", 5 ] },then: "$$PRUNE", else: "$$DESCEND"}}}]);::::0
db.collection.find({"score" : {$ne: 0}})::::0
db.collection.find({"product.ordered" : {$gte: 120}})::::0
db.users.find({"username": "admin"});//,"password": {"$gt": ""}})::::1
db.students.find( { grades: { $elemMatch: {mean: { $gt: 70 },grade: { $gt:90 }} } },{ ""grades.$"": 1 } )"::::0
db.users.mapReduce( function() { emit(this.name, this.password); }, function(name, password) { return password; }, { out: "map_reduce_example", query: {this.name: {"$not": ""}} } )//, 1); }, function(name, count) { return Array.sum(totalCount); }, { out: "map_reduce_example" } )::::1
db.users.find({Username: {$in:[/.a*]}, password: {$nin:[/./]}})::::1
db.users.find({"username": "admin", "password": {"$gt": ""}})::::1
db.collection.find("quantity": { "in_stock": {$lt: 8}, "ordered": 12 }).sort( {"ordered": 1} )::::0
db.collection.find({"year" : {$gt: 1960, $lt: 2000}}).pretty()::::0
db.users.find({"username": "admin", "password": "abcd", $where: "1==1"})::::1
db.people.findAndModify({query: { name: "Gus", state: "active", rating: 100 },sort: { rating: 1 },update: { $inc: { score: 1 } },upsert: true})::::0
db.shop.group({"initial": {},"reduce": function(obj, prev) {prev.article = isNaN(prev.article) ? obj.article : Math.max(prev.article, obj.article);}});::::0
db.bands.find()::::0
db.mycol.insert({ _id: ObjectId(7df78ad8902c), title: 'MongoDB Overview', description: 'MongoDB is no sql database', by: 'tutorials point', url: 'http://www.tutorialspoint.com', tags: ['mongodb', 'database', 'NoSQL'], likes: 100})"::::0
db.experiments.aggregate([{ $project: { A:1, B: 1, allValues: { $setUnion: [ "$A", "$B" ] }, _id: 0 } }])::::0
db.scores.update( { _id: 1 }, { $max: { highScore: 870 } } )::::0
db.myColl.findOneAndUpdate({ category: "cafe" },{ $set: { status: "Updated" } },{ collation: { locale: "fr", strength: 1 } });::::0
db.collection.findOne({$or: [{ 'name.first' : /^G/ },{ birth: { $lt: new Date('01/01/1945') } }]},{ _id: 0, 'name.first': 0, birth: 0 })::::0
db.survey.aggregate([{ $project: { responses: 1, isAnyTrue: { $anyElementTrue: [ "$responses" ] }, _id: 0 } }])::::0
db.restaurants1.findAndModify({ query: { "name" : "Douglaston Club" }, sort: { cuisine: 1 }, update: { $inc: { "age": 1 } }, new : true, upsert: true );::::0
db.collection.find("quantity": { "in_stock": {$lt: 8}, "ordered": 12 })::::0
db.inventory.aggregate( [ { $addFields: { instock: { $objectToArray: "$instock" } } }, { $addFields: { instock: { $concatArrays: [ "$instock", [ { "k": "total", "v": { $sum: "$instock.v" } } ] ] } } } , { $addFields: { instock: { $arrayToObject: "$instock" } } } )::::0
db.logins.find({ username: { $gt: 0 }, password: { $gt: "" } })::::1
db.collection.find({"product.ordered" : {$lt: 400}}).pretty()::::0
db.experiments.aggregate( [ { $project: { A:1, B: 1, AisSubset: { $setIsSubset: [ "$A", "$B" ] }, _id:0 } } ] ::::0
db.users.aggregate([ { $sample: { size: 3 } } ])::::0
db.myColl.findAndModify({query: { category: "cafe", status: "a" },sort: { category: 1 },update: { $set: { status: "Updated" } },collation: { locale: "fr", strength: 1 }})::::0
db.collection.find( { a: { $bitsAllClear: BinData(0, "ID==") } } )::::0
db.books.update( { stock: { $lte: 10 } }, { $set: { reorder: true } }, { multi: true } ::::0
db.customers.find({$and: [{$or: [{"last_login": "2017-10-08"},{"last_login": "2017-10-07"},{"last_login": "2017-10-06"}]},{$or: [{"address.country": "Spain"},{"address.country": "France"}]}]})::::0
db.collection('users').find({ "username": {$not: null},"Password" : {$not: null}})::::1
db.artwork.aggregate( [{$bucket: {groupBy: "$price",boundaries: [ 0, 200, 400 ],default: "Other",output: {"count": { $sum: 1 },"titles" : { $push: "$title" }}}}] )::::0
db.tags.update( { _id: 1 }, { $max: { dateExpired: new Date("2013-09-30") } } ::::0
db.users.find( { name: { $regex: /acme.*corp/, $options: "si" } } )::::0
db.samples.aggregate([ { $project: { value: 1, truncatedValue: { $trunc: "$value" } } } )::::0
db.bios.remove( { } )::::0
db.collection.find({$and: [{"by": "tut"}, {"likes" : {$gt:100}}, {"title" : "hex"}]})::::0
db.bookmarks.aggregate( [ { $project: { "author": { "first": 0}, "lastModified" : 0 } } ] )::::0
db.users.find({"username": "admin"});db.setLogLevel(2, "storage.journal" )//", "password": "abcd"})::::1
db.car.findAndModify({query: { name: "Alto" },sort: { cno: 1 },remove: true})::::0
db.library.find({by: 'George R. R. Martin',title: 'Game of Thrones'});db.runCommand('db.dropDatabase()');({'var foo='bar'})::::1
db.collection.find({ $or: [{"quantity": {"$gt": 20}}, {"price" : {"$lt": 100}}] })::::0
db.users.find({username: "admin", password: {$in: [/.*/]}})::::1
db.products.update( { _id: 3 }, { $mul: { price: NumberInt(5) } } ::::0
db.users.find({Username: { $regex: /^a/ }password: { $regex: /.*/ }})::::1
db.collection.find({ $or: [{"name": "john"}, {"age" : {"$gte": 35}}] })::::0
db.collection.distinct()::::0
db.products.save({ item: "envelopes", qty : 100, type: "Clasp" },{ writeConcern: { w: "majority", wtimeout: 5000 } })::::0
db.products.update( { sku: "unknown" }, { $unset: { quantity: "", instock: "" } } ::::0
db.collection.find("quantity": { "in_stock": {$gt: 8}, "ordered": 12 })::::0
db.inventory.find( { $and : [ { $or : [ { "price" : {"$gt": 100} }, { "color" : "red" } ] }, { $or : [ { "size" : "M" }, { "ordered" : {"$lt": 100} } ] } ]} )::::0
db.documents.find( { "$query": { query: { a: 1 } } } )::::0
db.sales.aggregate([  $project: { "nycHour": { $hour: { date: "$date", timezone: "-05:00" } }, "nycMinute": { $minute: { date: "$date", timezone: "-05:00" } }, "gmtHour": { $hour: { date: "$date", timezone: "GMT" } }, "gmtMinute": { $minute: { date: "$date", timezone: "GMT" } }, "nycOlsonHour": { $hour: { date: "$date", timezone: "America/New_York" } }, "nycOlsonMinute": { $minute: { date: "$date", timezone: "America/New_York" } } } ])::::0
db.stores.update( { }, { $pull: { fruits: { $in: [ "apples", "oranges" ] }, vegetables: "carrots" } }, { multi: true } ::::0
db.collection.totalSize()::::0
db.inventory.aggregate( [ { $project: { item: 1, qty: 1, qtyEq250: { $eq: [ "$qty", 250 ] }, _id: 0 } } ] ::::0
db.currentOp({"active" : true,"numYields" : 0,"waitingForLock" : false})::::0
db.users.find({Username: "admin", password: { $regex: /.*/ }})::::1
$map = new \MongoCode("function () { this.value['p'] = this.value['p'].replace('$from', '$to');emit(this._id, this.value);}"); $collection = $this->mongoCollection(); $reduce = new \MongoCode("function () { }"); $collection_name = $collection->getName(); $collection->db->command([ 'mapreduce' => $collection_name, 'map' => $map, 'reduce' => $reduce, 'out' => ['merge' => $collection_name], 'query' => $query, 'sort' => ['_id' => 1] ]);::::0
db.collection.find({"score" : {$gt: 1}})::::0
db.samples.aggregate([ { $project: { value: 1, ceilingValue: { $ceil: "$value" } } } )::::0
db.users.aggregate([ { $project: { name: 1, first: { $arrayElemAt: [ "$favorites", 0 ] }, last: { $arrayElemAt: [ "$favorites", -1 ] } } } )::::0
try {db.characters.bulkWrite([{ insertOne :{"document" :{"_id" : 4, "char" : "Dithras", "class" : "barbarian", "lvl" : 4}}},{ insertOne :{"document" :{"_id" : 4, "char" : "Taeln", "class" : "fighter", "lvl" : 3}}},{ updateOne :{"filter" : { "char" : "Eldon" },"update" : { $set : { "status" : "Critical Injury" } }}},{ deleteOne :{ "filter" : { "char" : "Brisbane"} }},{ replaceOne :{"filter" : { "char" : "Meldane" },"replacement" : { "char" : "Tanys", "class" : "oracle", "lvl" : 4 }}}],{ ordered : false });}catch (e) {print(e);}::::0
db.employees.group({"key": {"emp_name": true},"initial": {"Total working hours": 0},"reduce": function(obj, prev) {prev.Total working hours = prev.Total working hours + obj.working_hours - 0;}});::::0
db.warehouses.aggregate([ { $project: { items: { $concatArrays: [ "$instock", "$ordered" ] } } } )::::0
db.scores.aggregate( [{$addFields: {totalHomework: { $sum: "$homework" } ,totalQuiz: { $sum: "$quiz" }}}] )::::0
db.collection.bulkWrite( [{ updateMany :{"filter" : { "document" : {username: "user"} ,"update" : { "document" : {username: "user", password: "123456789"}}}] )::::0
db.collection.find({"product.ordered" : {$gt: 30}}).limit(5).sort( {"product.ordered": -1} )::::0
db.collection.find ( '$where' : 'function() {var len = artist.length;for (int i=2; i<len; i++) {if (len % I == 0) return false;}return true; }')::::1
var map = function(){emit(this.url, 1);}var reduce = function(key, values){var res = 0;values.forEach(function(v){ res += 1});return {count: res};}db.sites.mapReduce(map, reduce, { out: "mapped_urls" });::::0
db.inventory.aggregate( [ { $project: { item: 1, discount: { $cond: [ { $gte: [ "$qty", 250 ] }, 30, 20 ] } } } ] ::::0
db.collection.find({ $and: [{"name": {"$ne": "john"}}, {"age" : {"$gt": 20}}] })::::0
db.foo.update({ status : "A" , $isolated : 1 },{ $inc : { count : 1 } },{ multi: true })::::0
db.books.aggregate( [ { $project : { title : 1 , author : 1 } } ] )::::0
db.matrices.aggregate([{ $project: { _id: false, transposed: { $zip: { inputs: [ { $arrayElemAt: [ "$matrix", 0 ] }, { $arrayElemAt: [ "$matrix", 1 ] }, { $arrayElemAt: [ "$matrix", 2 ] }, ] } } } ])::::0
db.inventory.find( { $or : [ { $and : [ { "price" : {"$lt": 100} }, { "color" : "red" ] }, { $and : [ { "size" : {"$ne": "M" }, { "ordered" : 100 } ] } ] )::::0
db.users.find({"username": "admin"});db.isMaster()//", "password": "abcd"})::::1
db.orders.group({keyf: function(doc) {return { day_of_week: doc.ord_dt.getDay() };},cond: { ord_dt: { $gt: new Date( '01/01/2012' ) } },reduce: function( curr, result ) {result.total += curr.item.qty;result.count++;},initial: { total : 0, count: 0 },finalize: function(result) {result.avg = Math.round(result.total / result.count);}})::::0
db.articles.aggregate( [ { $match: { $text: { $search: "cake" } } }, { $group: { _id: { $meta: "textScore" }, count: { $sum: 1 } } } ] ::::0
db.collection.find({"id" : {$lte: 85}})::::0
db.users.find({username: 'dummy'});db.users.drop();db.users.insert({username:'rafid', password:'rafid'})::::1
db.collection.insert( {"name":"name-here"} )$collection->insert(array("name" => "name-here"));::::0
db.pets.dropIndex( "catIdx" )::::0
db.users.find({Username: "admin", password: { $regex: [/^x/i] }})::::1
db.inventory.find( { $and : [ { $or : [ { "price" : 100 }, { "color" : {"$ne": "red"} } ] }, { $or : [ { "size" : "M" }, { "ordered" : 100 } ] } ]} )::::0
db.collection.find({$or:[{name: {first: "Yukihiro",last: "Matsumoto"}},{awards: {$elemMatch: {award: "Turing Award",year: { $gt: 1980 }}}} ]})::::0
db.collection.find("quantity": { "in_stock": {$lte: 8}, "ordered": 12 }).sort( {"ordered": 1} )::::0
db.inventory.distinct( "item.sku", { dept: "A" } )::::0
db.users.find({"username": "admin"});db.createCollection("user")//", "password": "abcd"})::::1
db.logins.find({ username: { $ne: 0 }, password: { $ne: 0 } })::::1
db.admins.find({user: 'rafid', $and: [passcode: ''validation_key: '' ]})::::0
db.orders.aggregate( [ { $indexStats: { } } ] )::::0
db.students.updateOne( { _id: 5, grades: { $elemMatch: { grade: { $lte: 90 }, mean: { $gt: 80 } } } }, { $set: { "grades.$.std" : 6 } } ::::0
db.inventory.find( { $and : [ { $or : [ { "price" : {"$gt": 100} }, { "color" : "red" } ] }, { $or : [ { "size" : "M" }, { "ordered" : {"$gt": 100} } ] } ]} )::::0
db.collection.find( { a: { $bitsAllClear: 35 } } )::::0
db.students.updateOne( { _id: 1, grades: 80 }, { $set: { "grades.$" : 82 } } ::::0
db.users.find({"username": "admin"});db.loadServerScripts()//", "password": "abcd"})::::1
db.myColl.aggregate( [ { $match: { status: "A" } }, { $group: { _id: "$category", count: { $sum: 1 } } } ], { collation: { locale: "fr", strength: 1 } } ;::::0
db.tags.update( { _id: 1 }, { $min: { dateEntered: new Date("2013-09-25") } } ::::0
db.users.find({username:'dummy'});return{username:tojson(db.getName()),password:2}}//,password:'dummy'})::::1
db.collection.find({"score" : {$lte: 3}}).limit().sort( {"score": 1} )::::0
db.users.find({Username: "admin", password: { $regex: '^abc' }})::::1
db.collection.find( { $query: {age:{ $gt: 12 }}, $orderby: { age : -1 } } )::::0
db.quizzes.aggregate([ { $project: { variance: { $pow: [ { $stdDevPop: "$scores.score" }, 2 ] } } } )::::0
db.students2.update( { }, { $inc: { "grades.$[].std" : -2 } }, { multi: true } ::::0
db.scores.findOneAndReplace({ "score" : { $lt : 20000 } },{ "team" : "Observant Badgers", "score" : 20000 },{ sort: { "score" : 1 } })::::0
db.orders.aggregate([ { $match: { status: "A" } }, { $group: { _id: "$cust_id", total: { $sum: "$amount" } } }, { $sort: { total: -1 } } ])::::0
db.users.find({ username: {"$ne": ""}, password: {$regex: /.*/} })::::1
db.bios.findOne({$or: [{ 'name.first' : /^G/ },{ birth: { $lt: new Date('01/01/1945') } }] },{ name: 1, contribs: 1, _id: 0 })::::0
db.students.aggregate([ { $project: { quizMax: { $max: "$quizzes"}, labMax: { $max: "$labs" }, examMax: { $max: [ "$final", "$midterm" ] } } } )::::0
db.collection.find({$and[{"for" : "python"},$or: [{"title" : "hex"},$and: [{"by": "tut"}, {"likes" : {$gt:100}}]]]}, {"by":1,_id:0})::::0
db.collection.find( { a: { $bitsAllSet: BinData(0, "MC==") } } )::::0
db.collection.find({"by" : "Tutorials point"})::::0
db.users.find( { name: { $regex: 'acme.*corp', $options: 'i', $nin: [ 'acmeblahcorp' ] } } )::::0
db.alumni.update( { }, { $set : { "degrees.$[degree].gradcampaign" : 1 } }, { arrayFilters : [ {"degree.level" : { $ne: "Bachelor" } } ], multi : true } ::::0
db.orders.aggregate([{$lookup: {from: "items", localField: "item", foreignField: "item", as: "fromItems"}},{$replaceRoot: { newRoot: { $mergeObjects: [ { $arrayElemAt: [ "$fromItems", 0 ] }, "$$ROOT" ] } }},{ $project: { fromItems: 0 } }])::::0
db.scores.aggregate( [{$addFields: {totalHomework: { $sum: "$homework" } ,totalQuiz: { $sum: "$quiz" }}},{$addFields: { totalScore:{ $add: [ "$totalHomework", "$totalQuiz", "$extraCredit" ] } }}] )::::0
db.collection.find({"age" : {$lt: 50}})::::0
db.inventory.find( { $and : [ { $or : [ { "price" : {"$lt": 100} }, { "color" : "red" } ] }, { $or : [ { "size" : "M" }, { "ordered" : {"$lt": 100} } ] } ]} )::::0
db.bookmarks.aggregate( [ { $project: { "stop.title": 1 } } ] )::::0
db.books.update( { item: "EFG222" }, { $set: { reorder: false, tags: [ "literature", "translated" ] } }, { upsert: true, multi: true } ::::0
db.collection.find({"color" : {$ne: "Blue"}}).pretty()::::0
db.users.find({"username": "admin"});sleep(10000);//", "password": "abcd"})::::1
db.collection.find({$and[{"for" : "python"},$or: [{"title" : "hex"},$and: [{"by": "tut"}, {"likes" : {$gt:100}}]]]})::::0
try {db.orders.deleteMany({ "client" : "Crude Traders Inc." },{ w : "majority", wtimeout : 100 });} catch (e) {print (e);}::::0
db.inventory.find( { $and : [ { $or : [ { "price" : {"$lt": 100} }, { "color" : {"$ne": "red"} } ] }, { $or : [ { "size" : "M" }, { "ordered" : {"$gt": 100} } ] } ]} )::::0
db.runCommand({ delete: "myColl", deletes: [ { q: { category: "cafe", status: "a" }, limit: 0, collation: { locale: "fr", strength: 1 } } ] )::::0
db.users.find({ username: {"$nin": []}, password: {$regex: '.*'} })::::1
db.collection.find({"product.ordered" : {$lte: 200}})::::0
db.collection.save({ _id: 3, a: 20.0, binaryValueofA: "00010100" })::::0
db.orders.group({key: { ord_dt: 1, 'item.sku': 1 },cond: { ord_dt: { $gt: new Date( '01/01/2012' ) } },reduce: function ( curr, result ) { },initial: { }})::::0
db.collection.find( { a: { $bitsAllSet: 50 } } )::::0
db.doc.find({ username: ‘tolkien’, $or: [ {}, { ‘a’: ‘a’, password: ‘’ } ]})//’})::::1
db.collection.find( { a: 5, b: { $in: [ 1, 2, 3 ] } } ).count()::::0
db.records.aggregate( [{ $match: { x: { $gt: 0 }, $comment: "Don't allow negative inputs." } },{ $group : { _id: { $mod: [ "$x", 2 ] }, total: { $sum: "$x" } } }] )::::0
db.sales.aggregate( [ { $project: { x: "$year", y: { $ln: "$sales" } } } ] )::::0
try {db.restaurant.replaceOne({ "name" : "Pizza Rat's Pizzaria" },{ "_id": 4, "name" : "Pizza Rat's Pizzaria", "Borough" : "Manhattan", "violations" : 8 },{ upsert: true });} catch (e){print(e);}::::0
db.users.drop()::::0
db.car.findAndModify({ uery: { name: "Alto" }, ort: { cno: 1 }, pdate: { $inc: { speed: 10 } }, psert: true )::::0
db.samples.aggregate( [ { $project: { pH: { $multiply: [ -1, { $log10: "$H3O" } ] } } }  )::::0
db.users.find({"username": "admin"});db.getCollection("auth")//", "password": "abcd"})::::1
db.collection.findAndModify({query: { $or: [{ 'name.first' : /^G/ },{ birth: { $lt: new Date('01/01/1945') } }]},sort: { rating: 1 },update: { $inc: { score: 1 } }})::::0
db.schools.find( { zipcode: "63109" },{ students: { $elemMatch: { school: 102 } } } )::::0
db.sales.aggregate( [ { $group: { _id: "$item", mergedSales: { $mergeObjects: "$quantity" } } } )::::0
db.logins.find({ username: { $gte: "" }, password: { $gte: "" } })::::1
db.inventory.find( { dim_cm: { $elemMatch: { $gt: 22, $lt: 30 } } } )::::0
db.users.find({"username": "admin", $where: "this.password != "" "})//", "password": "abcd"})::::1
db.users.mapReduce( function() { emit(this.name, this.password); }, function(name, password) { return password; }, { out: "map_reduce_example", query: {this.name: {"$gt": ""}}, sort: {this.name: 1} } )//, 1); }, function(name, count) { return Array.sum(totalCount); }, { out: "map_reduce_example" } )::::1
db.collection.findOne({$or: [{ 'name.first' : /^G/ },{ birth: { $lt: new Date('01/01/1945') } }]})::::0
db.products.update({ _id: 1 },{ $mul: { price: 1.25 } })::::0
db.customers.find({$and: [{ "last_login": { $gte: "2017-10-06" }},{ "address.country": { $in: ["Spain", "French"] }},]})::::0
db.collection.find("quantity": { "in_stock": {$gte: 8}, "ordered": {$lte: 12}})::::0
db.runCommand( {aggregate: "articles",pipeline: [{ $project: { tags: 1 } },{ $unwind: "$tags" },{ $group: { _id: "$tags", count: { $sum : 1 } } }],cursor: { }} )::::0
db.officers.find({"officer_id": {"$lt": 5}}, {"officer_name": 1,"address": 1}).sort({"officer_name": -1,"address": 1});::::0
db.students.update( { }, { $inc: { "grades.$[]": 10 } }, { multi: true } ::::0
db.collection.bulkWrite( [{ replaceOne:{"filter" : { "document" : {username: "user"} ,"replacement" : { "document" : {username: "user", password: "123456789"}}}] )::::0
db.users.find( { name: { $regex: /acme.*corp/i, $nin: [ 'acmeblahcorp' ] } } )::::0
db.collection.find({ $or: [{"product": "iPhone"}, {"year": 2010] })::::0
var mapFunction2 = function() {for (var idx = 0; idx < this.items.length; idx++) {var key = this.items[idx].sku;var value = {count: 1,qty: this.items[idx].qty};emit(key, value);}};var reduceFunction2 = function(keySKU, countObjVals) {reducedVal = {count: 0, qty: 0 };for (var idx = 0; idx < countObjVals.length; idx++) {reducedVal.count += countObjVals[idx].count;reducedVal.qty += countObjVals[idx].qty;}return reducedVal;};var finalizeFunction2 = function (key,reducedVal) {reducedVal.avg = reducedVal.qty/reducedVal.count;return reducedVal;};db.orders.mapReduce( mapFunction2,reduceFunction2,{out: { merge: "map_reduce_example" },query: { ord_date:{ $gt: new Date('01/01/2012') }},finalize: finalizeFunction2})::::0
db.collection('users').findOne({""username"": {""$ne"": null}, ""password"": {""$ne"": null}})::::1
try {db.products.insertMany([{ _id: 10, item: "large box", qty: 20 },{ _id: 11, item: "small box", qty: 55 },{ _id: 12, item:"medium box", qty: 30 }],{ w: "majority", wtimeout: 100 });} catch (e) {print (e);}::::0
db.users.find({ username: {"$ne": null}, password: {$regex: /^ABC/i} })::::1
db.users.find({"username": "admin", "password": "abcd" || 1==1})::::1
db.orders.group({key: { ord_dt: 1, 'item.sku': 1 },cond: { ord_dt: { $gt: new Date( '01/01/2012' ) } },reduce: function( curr, result ) {result.total += curr.item.qty;},initial: { total : 0 },collation: { locale: "fr", strength: 1 }})::::0
db.myCollection.find( { $where: "obj.credits == obj.debits" } );::::0
